c1
letters
c2 <- letters
c2 <- letters[1:10]
c1
c2
df <- data.frame(col.name.1 = c1, col.name.2 = c2)
df
write.csv(df, file = 'saved_df.csv')
df2 <- read.csv('saved_df.csv')
df 2
df2
df
df
nrow(df)
ncol(df)
colnames(df)
rownames((df))
rownam
rownames(df)
str(df)
summary(df)
summary(df)
df[[5, 2]]
df[[5, 'col.name.2']]
df[[2, 'col.name.1']] <- 9999
df
df[1, ]
df[1, ]
emptycards
mtcards
mtcars
head(mtcards)
head(mtcars)
mtcars$mpg
mtcars[, 'mpg']
mtcars[, 1]
mtcars[['mpg']]
mtcars['mpg']
mtcars[1]
mtcars[c('mpg', 'cy')]
head(mtcars[c('mpg', 'cy')])
head(mtcars[c('mpg', 'cyl')])
df[[5, 2]]
df[1, ]
df[[5, 'col.name.2']]
df[1, ]
df <- data.frame(col.name.1 = 2000, col.name.2 = 'new')
df
df <- data.frame(col.name.1 = c1, col.name.2 = c2)
df
df <- data.frame(col.name.1 = c1, col.name.2 = c2)
df
df2 <- data.frame(col.name.1 = 2000, col.name.2 = 'new')
df2
dfnew <- rbind(df, df2)
dfnew
df$newcol <- 2*df$col.name.1
df
df
df$newcol.copy <- df$newcol
head(df)
df[, 'newcol.copy2'] <- df$newcol
df
colnames(df)
colnames(df) <- c('1', '2', '3', '4', '5')
head(df\)
head(df)
colnames(df)[1] <- 'NEW COL NAME'
df
df[1:10, ]
df[1:3, ]
head(df)
head(df, 7)
head(df)
df[-2, ]
head(mtcars)
mtcars[mtcars$mpg > 20]
mtcars[mtcars$mpg > 20, ]
head(mtcars)
mtcars[mtcars$mpg > 20 & mtcars$cyl == 6, ]
mtcars[mtcars$mpg > 20 & mtcars$cyl == 6, c('mog', 'cyl', 'hp')]
mtcars[mtcars$mpg > 20 & mtcars$cyl == 6, c('mpg', 'cyl', 'hp')]
subset(mtcars, mpg > 20 & cyl == 6)
mtcars
head(mtcars)
mtcars[, c(1, 2, 3)]
mtcars[, c('mpg', 'cyl', )]
mtcars[, c('mpg', 'cyl' )]
Na
NA
is.NA(mtcars)
is.na(mtcars)
any(is.na(df))
any(is.na(mtcars$mpg))
df[is.na(df)] <- 0
df
mtcars$mpg[ is.na(mtcars$mpg)] <- mean(mtcars$mpg)
mtcars
age <- c(22, 25, 26)
weight <- c(150, 165, 120)
sex <- c(M, M, F)
sex <- c('M', 'M', 'F')
rm(list = ls())
sam <- c(22, 150, 'M')
frank <- c(25, 165, 'M')
amy <- c(26, 120, 'F')
df <- dataframe(age = sam, weight = frank, sex = amy)
c1 <- 1:10
c2 <- letters[1:10] #  built-in vector for the letters of the alphabet
df <- data.frame(col.name.1 = c1, col.name.2 = c2) # if no names, columns will be named by the variables
df
c1
c2
sam
df
df <- data.frame(age, weight, height)
df <- data.frame(amy, weight, setTxtProgressBar()
df
rm(list = ls ())
age <- c(22, 25, 120)
weight <- c(150, 165, 120)
sex <- c('M', 'M', 'F')
df <- data.frmae(age, weight, amy)
df <- data.frame(age, weight, amy)
df <- data.frame(age, weight, sex)
sd
df
rownames
rownames(df)
rownames(df) <- c('sam', 'frank', 'amy')
df
is.data.frame(mtcars)
as.data.frame()
mat <- matrix(1:25, nrow = 5)
mat
help("as.data.frame")
df.matrix <- as.data.frame(mat)
df.matrix
df2 <- mtcars
head(df3)
head(df2)
mean(df2$mpg)
df2[, mtcars$cyl == 6]
df2[ mtcars$cyl == 6, ]
mtcars[, c('mpg', 'gear', carb)]
mtcars[, c('mpg', 'gear', 'carb'')]
mtcars[, c('mpg', 'gear', 'carb')]
mtcars[, c('mpg', 'gear', 'carb')]
df$new.column <- df$hp / df$wt
df$new.column <- df$hp/wt
df2$new.column <- df2$hp / df2$wt
head(df2)
help(rounf)
help("round")
df2$new.column <- round(df2$new.column)
head(df2)
df2$new.column <- round(df2$new.column, 2)
head(df2)
df2$new.column <- df2$hp / df2$wt
head(df2)
df2$new.column <- round(df2$new.column, 2)
head(df2)
average <- mean(subset(df2, mpg > 100 & wt > 2.5))
average <- mean(df2[df2$mpg > 100 & df2$wt > 2.5), ])
average <- mean(df2[df2$mpg > 100 & df2$wt > 2.5, ])
df2['Hornet Sportabout'][mpg]
df2['Hornet Sportabout']['mpg']
subset(df, hp > 100 & wt > 2.5)
subset(df2, hp > 100 & wt > 2.5)
mean(subset(df2, hp > 100 & wt > 2.5)$mpg)
df2[df$hp > 100 & df$wt > 2.5, ]$mpg
df2[df2$hp > 100 & df2$wt > 2.5, ]$mpg
mean(df2[df2$hp > 100 & df2$wt > 2.5, ]$mpg)
df2['Hormet Sportabout', ]
df2
df2['Hornet Sportabout',]$mpg
df2['Hornet Sportabout',]
df2['Hornet Sportabout',]$mpg
v <- c(1, 2, 3,)
v <- c(1, 2, 3)
rm(list = ls())
v <- c(1, 2, 3)
m <- matrix(1:10, nrow = 2)
df <- mtcars
class(v)
class(m)
class(df)
my.list <- list(v, m , df)
my.list
my.names.list <- list(sample.vec = v, my.matrix = m, sample.df = df)
my.named.list <- list(sample.vec = v, my.matrix = m, sample.df = df)
my.names.list
my.named.list
my.named.list$sample.df
my.list[1]
my.named.list[1]
my.named.list['sample.vec']
class(my.named.list['sample.vec'])
my.named.list$sample.vec
class(my.named.list$sample.vec)
my.named.list[['sample.vec']]
double.list <- c(my.named.list, my.named.list)
double.list
str(my.named.list)
Sys.getenv("JAVA_HOME")
library(rJava)
::.javaGD()
head(mtcars)
library(writexl)
install.packages('writexl')
library(writexl)
help(writexl)
write_xlsx(mtcars, 'batai_de_cap.xlsx')
head('batai_de_cap.xlsx')
installed.packages('RPostgreSQL')
install.packages('RPostgreSQL')
library(RPostgreSQL)
help(RPostgresSQL)
?RPostgresSQL
??RPostgresSQL
install.packages('rvest')
library(rvest)
demo(package = 'rvest')
demo(package = 'rvest', topic = 'tripadvisor')
Return
demo(package = 'rvest', topic = 'unitedd')
demo(package = 'rvest', topic = 'united')
x < 20 & x > 5
z <- 10
x <- 10
x < 20 & x > 5
rm(list = ls())
T & F
x <- 10
x == 10 | x == 100
!(10 == x)
!!!(10 == x)
!!(10 == x)
df <- mtcars
df[df$mpg > 20, ]
subset(df, mpg > 20)
df[ (df$mpg > 20) & (df$hp > 100), ]
df[ (df$mpg > 20) | (df$hp > 100), ]
if (x == 10){
# code to execute
print('X is equal to 10!')
}
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
if (x % 2 == 1){
if (x %% 2 == 1){
print('even number')
}else{
print('odd number')
}
help(is.matrix)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
x <- c(1, 3, 7)
if (x[1] > x[2] & x[2] > x[3]){
print(x[1], x[2], x[3])
}
x <- matrix() # empty matrix
if (is.matrix(x)){
print("x is a matrix")
}else{
print('not a matrix')
}
x <- c(3, 7, 1)
if (x[1] > x[2]){
# first and second place
first <- x[1]
second <- x[2]
}else{
first <- x[2]
second <- x[1]
}
if (x[3] > first & x[3] > second){
# 3rd was the largest
third <- second
second <- first
first <- x[3]
}else if (x[3] < first & x[3] < second){
# 3rd was the smallest
third <- x[3]
}else{
# goes in the middle
third <- second
second <- x[3]
}
print(paste(fir, sec, thi)) # paste together 3 variables
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
x <- c(20, 10, 1)
if (x[1] > x[2] & x[1] > x[3]){
print(x[1])
}else if (x[2] > x[3]){
print(x[2])
}else{
print(x[3])
}
x <- c(20, 100, 1)
if (x[1] > x[2] & x[1] > x[3]){
print(x[1])
}else if (x[2] > x[3]){
print(x[2])
}else{
print(x[3])
}
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
x <- 0
while (x < 10){
print(paste0('x is: ', x)) # concatenate the input values in a single character string
x <- x + 1
if (x == 10){
print('x is not equal to 10, break loop')
}
}
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
for (temp.var in v){
# execute for every temporary variable in v
print(temp.var)
}
v <- c(1, 2, 3, 4, 5)
for (variable in v){
print(variable)
}
for (temp.var in v){
# execute for every temporary variable in v
print('hello')
}
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
1 : nrow(mat))
1 : nrow(mat)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
sum(c(2, 4, 6))
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
times5 <- function(num){
my.result <- num * 5
return(my.result)
}
my.output <- times5(100)
print(my.output)
my.output
my.result
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
source("~/Desktop/github R course/5. Programming_basics.R", echo=TRUE)
abs(2)
abs(-2)
v <- abs(-2, -3, 0, 4)
v <- c(-2, -3, 0, 4)
abs(v)
round(2.33211, digits = 2)
round(2.377, 3)
round(2.377, 1)
round(2.33211, digits = 2)
sum(v)
mean(v)
text <- 'Hi there, do you know who you are coding for'
text
grepl('coding', text)
grep('dog', text)
grepl('do you', text)
v <- c('a', 'b', 'c', 'd', 'd')
v
grepl('b', v)
grep('b', v)
grep('d', v)
grep('a', c('b', 'a'))
help(grep)
grepl('a', c('b', 'a'))
Sys.Date
Sys.Date()
c <- '2002-07-18'
class(C)
class(S)
class(c)
as.Date(c)
my.date <- as.Date(c)
as.Date('Feb-02-2024')
my.date <- as.Date('Feb-02-24', format = "%b-%b-%y")
my.date
my.date <- as.Date("Feb-02-24", format = "%b-%b-%y")
my.date
my.date <- as.Date("Feb-02-24", format = "%b-%d-%y")
my.date
as.Date('July, 07, ')
as.Date('July, 18, 2002')
as.Date('July, 18, 2002', format = "%B, %d, %Y")
as.POSIXct("19:28:11", format = "%H:%M:%S")
help(strptime)
strptime("19:40:19", format = "%H:%M:%S")
rm(list = ls())
install.packages('dyplr')
install.packages('dplyr')
install.packages('nycflights13')
library(dplyr)
library(nycflights13)
head(flights)
summary(fligths)
summary(flighy)
summary(flights)
head(filter(flights, month == 11, day == 3, carrier == 'AA'))
head(flights[flights$month == 11 & flights$day == 3 & flights$carrier == 'AA', ])
slice(flights, 1:10)
head(arrange(flights, year, month, day, air_time))
head(arrange(flights, year, month, day, arr_time))
head(arrange(flights, year, month, day, desc(arr_time))
head(arrange(flights, year, month, day, desc(arr_time)))
head(select)
head(select(flights, carrier))
head(select(flights, carrier, arr_time))
head(select(flights, carrier, arr_time, month))
head(rename(flights, airline_carrier = carrier))
distinct(select(flights, carrier))
head(mutate(flights, new_col = arr_delay - dep_delay))
head(tranmute(flights, new_col = arr_delay - dep_delay))
head(transmute(flights, new_col = arr_delay - dep_delay))
summarise(flights, avg_air_time = mean(air_time, na.rm = TRUE))
summarise(flights, total_air_time = sum(air_time, na.rm = TRUE))
sample_n(flights, 10)
sample_frac(flights, 0.1)
library(dplyr)
df <- mtcars
filter(df, mg>20)
filter(df, mpg>20)
result <- arrange(sample_n(filter(df, mpg>20), size = 5), desc(mpg))
print(result)
a <- filter(df, mpg>20)
b <- sample_n(a, size = 5)
result <- arrange(b, desc(mpg))
print(result)
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
library(dplyr)
head(mtcars)
df %>% filter(mpg > 20, cyl > 6)
result <- df %>% filter(mpg > 20, cyl > 6)
rsult
result
head(filter(mtcars, mpg > 20, cyl > 6))
head(filter(mtcars, mpg > 20, cyl == 6))
head(arrange(mtcars, cyl, desc(wt)))
head(select(mtcars, mpg, cyl))
head(distinct(mtcars, gear))
head(mutate(mtcars, performance = hp / wt))
summarise(mtcars, mean_mpg = mean(mpg, na.rm = T))
result <- mtcars %>% filter(cyl == 6) %>% summarise(mean(cyl))
result
result <- mtcars %>% filter(cyl == 6) %>% (mean(cyl))
result <- mtcars %>% select(cyl == 6)
result <- mtcars %>% filter(cyl == 6)
result
result <- mtcars %>% filter(cyl == 6) %>% summarise(mean(filer))
result <- mtcars %>% filter(cyl == 6) %>% summarise(mean(filter))
result <- mtcars %>% filter(cyl == 6) %>% summarise(mean(cyl))
result
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
install.packages('tidyr')
install.packages('data.table')
library(tidyr)
library(data.table)
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
df
gather(df, Quarter, Revenue, Qtr1:Qtr4)
help(gather)
df %>% gather(Quarter, Revenue, Qtr1 : Qtr4)
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
source("~/Desktop/github R course/7. Data_manipulation.R", echo=TRUE)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
head(stocks)
stocks.gathered <- stocks %>% gather(stock, price, x:z)
stocks.gathered <- stocks %>% gather(stock, price, X:Z)
stocks.gathered <- stocks %>% gather(stock, price, X, Y, Z)
heaad(stocks.gathered)
head(stocks.gathered)
stocks.gathered %>% spread(stock.price)
stocks.gathered %>% spread(stock, price)
spread(stocks.gathered, stock, price)
spread(stocks.gathered, time, price)
spread(stocks.gathered, time, price)
df <- data.frame(new.col = c(NA, 'a.x', 'b.y', 'c.z'))
new.col
df <- data.frame(new.col = c(NA, 'a.x', 'b.y', 'c.z'))
new.col
View(df)
df
separate(df, new.col, c('ABC', 'XYZ'))
df <- data.frame(new.col = c(NA, 'a-x', 'b-y', 'c-z'))
df
separate(data = df, col = new.col, into = c('abc', 'xyz'), sep = '-')
df.sep <- separate(data = df, col = new.col, into = c('abc', 'xyz'))
df.sep
unite(df.sep, new.joined.col, abc, xyz)
unite(df.sep, new.joined.col, abc, xyz, sep = '---')
